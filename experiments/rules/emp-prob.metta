
;;; File Dependency Documentation:
;;;
;;; Overview:
;;; This document outlines the file dependencies required by this module.
;;;
;;; Dependencies:
;;; 1. Main Module Registration:
;;;    - Registers the core module from the '../../experiments' directory.
;;;
;;; 2. Imported Modules:
;;;    - experiments:rules:emp-tv:
;;;         Loads the empirical TV-related rules.
;;;    - experiments:utils:common-utils:
;;;         Provides common utility functions used across experiments.
;;;    - experiments:utils:emp-tv-bs:
;;;         Contains utilities specific to empirical TV batch operations.
;;;    - experiments:utils:bs-utils:
;;;         Supplies additional utilities for batch statistics.





;     emp-prob:
;         Computes the empirical probability of a given pattern within a database.

;         Parameters:
;             - $pattern: The pattern to be matched or evaluated.
;             - $db: The database in which the pattern is searched.

;         Internal Computation Steps:
;             1. Calls (universe-count $pattern $db) to obtain the total count of items in the universe,
;                  storing the result in $ucount and also aliasing it as $ms.
;             2. Retrieves the support of the pattern via (sup $pattern $db).
;             3. Computes the empirical probability by dividing the support ($sup) by the universe count ($ucount).

;         Return Value:
;             - The ratio of the support of the pattern over the universe count, representing the empirical probability.


(= (emp-prob $pattern $db)
    (let*
        ( ( ($ucount ) ( (universe-count $pattern $db)))
            ( ($ms) ($ucount))
            ( ($sup) ( (sup-num $pattern $db)))

        ) (/ $sup  $ucount)
))





;; Documentation for emp_prob_subsmp:
;; 
;; Parameters:
;;   $pattern   - The pattern whose empirical probability is to be evaluated.
;;   $db        - The database in which the empirical probability is computed.
;;   $subsize   - The size of the subsample to use if it is smaller than the database size.
;;
;; Description:
;;   This function computes the empirical probability of a pattern.
;;   If the provided subsample size is less than the size of the database,
;;   it calculates the empirical probability using a subsample (via subsample-py).
;;   Otherwise, it computes the probability over the entire database.
;;
;; Returns:
;;   The result from the emp-prob function applied either to the subsample or the full database.
(= (emp_prob_subsmp $pattern $db $subsize)

    (if (< $subsize (db_size $db))
        (emp-prob $pattern (subsample-py $db $subsize))
        (emp-prob $pattern $db)
    )
)

; Function: emp_prob_helper
; Description:
;   Recursively computes empirical probability samples for a given pattern and database.
; Parameters:
;   $pattern: The pattern for which to evaluate the empirical probability.
;   $db: The database or data set from which to draw samples.
;   $n_resample: The number of times to perform the sampling process, which determines the recursion depth.
;   $subsize: The size of each subsample used when computing the emp_prob_subsmp.
; Returns:
;   A list of empirical probability values generated by repeatedly sampling the database.
; Notes:
;   - When $n_resample is 0, the function returns an empty list, serving as the base case for recursion.
;   - In each recursive call, emp_prob_subsmp is called to generate the head sample, and emp_prob_helper is recursively
;     invoked to generate the tail of the list, after decrementing $n_resample by 1.
(= (emp_prob_helper $pattern $db $n_resample $subsize) 

    (if (== $n_resample 0) 
        () 
        (let* (
            ($head-emp (emp_prob_subsmp $pattern $db $subsize))
            ($tail-emp (emp_prob_helper $pattern $db (- $n_resample 1) $subsize))

            )
        (cons-atom  $head-emp $tail-emp)
    )
    )
)
 



;; emp_prob_bs: Computes the empirical probability for a given pattern on a database.
;;
;; Parameters:
;;   $pattern    - The pattern to be evaluated.
;;   $db         - The database against which the pattern is evaluated.
;;   $n_resample - The number of resampling iterations to perform when using a subset.
;;   $subsize    - The size of the subset used for resampling. If this value is less than the total size of $db,
;;                resampling is performed; otherwise, the entire database is used.
;;
;; Behavior:
;;   - If $subsize is smaller than the size of $db, the function computes an average empirical probability
;;     by invoking the emp_prob_helper multiple times over resampled subsets.
;;   - Otherwise, it computes the empirical probability over the entire database using emp-prob.
;;
;; Returns:
;;   The empirical probability computed either through resampling or directly from the full database.
( = (emp_prob_bs $pattern $db $n_resample $subsize)
    (if (< $subsize (db_size $db))
        (avrg-tuple (emp_prob_helper $pattern $db $n_resample $subsize))
        (emp-prob $pattern $db)
    )

)







; Function: emp-prob-pbs
;
; Description:
;   Estimates the empirical probability for a given pattern against a database.
;   When the pattern consists of more than one conjunct, it computes an estimation interval 
;   using ji_prob_est_interval, and then recalculates the empirical probability using the
;   maximum estimated probability value from that interval.
;   If the pattern has only one conjunct, the function falls back to a standard empirical 
;   probability estimation using emp-prob.
;
; Parameters:
;   $pattern  - The pattern for which the empirical probability is to be computed.
;   $db       - The database that contains the relevant data.
;   $db-ratio - A parameter used to adjust the probability estimation process.
;
; Return:
;   The function returns the empirical probability of the pattern based on the conditions
;   evaluated.
(= (emp-prob-pbs $pattern $db $db_ratio)
    (if (< 1 (n_conjuncts $pattern))
        (let ($emin $emax) (ji_prob_est_interval $pattern $db $db_ratio)

            (emp-prob-pbs $pattern $db $emax $db_ratio)
        )
    (emp-prob $pattern $db)
)
)



; Function: emp-prob-pbs
; 
; Purpose:
;   Computes the empirical probability of a given pattern within a database using bootstrap sampling 
;   if the database size (after applying a ratio correction) is smaller than the expected support derived 
;   from a probability estimation. Otherwise, it delegates the calculation to a standard empirical probability function.
;
; Parameters:
;   $pattern      - The pattern for which the empirical probability is computed.
;   $db           - The database in which the pattern is searched.
;   $prob-estimate- An initial probability estimate for the pattern.
;   $db-ratio     - A scaling factor applied to the database size.
;
; Process:
;   1. Convert the probability estimate to an expected support using 'prob_to_support'.
;   2. Adjust the database size using 'db_size' and the provided ratio ($db-ratio).
;   3. Compare the adjusted database size ($db-size) with the support estimate.
;   4. If the adjusted database size is less than the support estimate:
;        a. Determine a sub-sample size using 'subsmp-size'.
;        b. Perform bootstrap sampling (using a fixed number of resamples) with 'emp_prob_bs' to estimate the empirical probability.
;   5. Otherwise, fall back to calculating the empirical probability using 'emp-prob'.
;
; Returns:
;   The computed empirical probability (either from bootstrap sampling or directly from 'emp-prob').

(= (emp-prob-pbs $pattern $db $prob-estimate $db-ratio)
    (let* ( ($support-estimate (prob_to_support $pattern $db $prob-estimate))
            ($db-size (* (db_size $db) $db-ratio)))
        (if (< $db-size $support-estimate)
            (let* ( ($subsize (subsmp-size $pattern $db-size $support-estimate))
                    ($n-resample 10)
                    ($emp-prob (emp_prob_bs $pattern $db $n-resample $subsize)))
                $emp-prob
            )
            (emp-prob $pattern $db)
        )
    )
)








